import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from mplfinance.original_flavor import candlestick_ohlc
import matplotlib.dates as mdates

# Step 1: Fetch financial data of F&O stocks in NSE
def fetch_fo_stocks():
    # For demonstration purposes, we use a predefined list of F&O stocks
    fo_stocks = ["AARTIIND.NS",'ABB.NS','ACC.NS','ADANIENT.NS','ADANIPORTS.NS','ABCAPITAL.NS','ABFRL.NS','APLLTD.NS','AMARAJABAT.NS','AMBUJACEM.NS','APOLLOHOSP.NS','APOLLOTYRE.NS','ASHOKLEY.NS','ASIANPAINT.NS','ASTRAL.NS','ATUL.NS','AUROPHARMA.NS','AUBANK.NS','AXISBANK.NS','BAJAJ-AUTO.NS','BAJAJFINSV.NS','BALKRISIND.NS','BALRAMCHIN.NS','BANDHANBNK.NS','BANKBARODA.NS','BATAINDIA.NS','BERGEPAINT.NS','BEL.NS','BHARATFORG.NS','BPCL.NS','BHARTIARTL.NS','BHEL.NS','BIOCON.NS','BSOFT.NS','BRITANNIA.NS','INDUSTOWER.NS','BIL.NS','CANBK.NS','CANFINHOME.NS','CHAMBLFERT.NS','CHOLAFIN.NS','CIPLA.NS','CUB.NS','COALINDIA.NS','COFORGE.NS','COLPAL.NS','CONCORD.BO','COROMANDEL.NS','CROMPTON.NS','CUMMINSIND.BO','GAIL.NS','GMRINFRA.NS','GODREJCP.NS','GRANULES.NS','GUJGASLTD.NS','GLENMARK.NS','GNFC.NS','GODREJPROP.NS','GRASIM.NS','GSPL.NS','HAL.NS','HCLTECH.NS','HDFCBANK.NS','HCLTECH.NS','HDFCBANK.NS','HDFC.NS','HINDALCO.NS','HINDPETRO.NS','HAVELLS.NS','HDFCAMC.NS','HDFCLIFE.NS','HEROMOTOCO.NS','HINDCOPPER.NS','HINDUNILVR.NS','ICICIBANK.NS','ICICIGI.NS','ICICIGOLD.NS','IDFCFIRSTB.NS','IDFC.NS','IBULHSGFIN.NS','INDIACEM.NS','IEX.NS','IOC.NS','IGL.NS','INFY.NS','IPCALAB.NS','ITC.NS','INDIAMART.NS','INDHOTEL.NS','INDIGO.NS','INDUSINDBK.NS','INTELLECT.NS','IRCTC.NS','JINDALSTEL.NS','JKCEMENT.NS','JSWSTEEL.NS','JUBLFOOD.NS','LAURUSLABS.NS','L&TFH.NS','LT.NS','LUPIN.NS','LICHSGFIN.NS','MGL.NS','M&M.NS','MARICO.NS','MFSL.NS','MPHASIS.NS','MCX.NS','M&MFIN.NS','MANAPPURAM.NS','METROPOLIS.NS','MSUMI.NS','MUTHOOTFIN.NS','NATIONALUM.NS','NAVINFLUOR.NS','NMDC.NS','NAUKRI.NS','NBCC.NS','NTPC.NS','OBEROIRLTY.NS','ONGC.NS','OFSS.NS','PETRONET.NS','PIDILITIND.NS','PEL.NS','PFC.NS','PNB.NS','PERSISTENT.NS','PFIZER.NS','PIIND.NS','POLYCAB.NS','POWERGRID.NS','PVRINOX.NS','SBICARD.NS','SBIN.NS','SUNPHARMA.NS','SYNGENE.NS','SBILIFE.NS','SRF.NS','SAIL.NS','SUNTV.NS','SHRIRAMFIN.NS','SIEMENS.NS','STAR.NS','TATACHEM.NS','TATACONSUM.NS','TATAPOWER.NS','TORNTPOWER.NS','TVSMOTOR.NS','TATACOMM.NS','TATAMOTORS.NS','TATASTEEL.NS','DABUR.NS','DALMIASUG.NS','DEEPAKNTR.NS','DELTACORP.NS','DIVISLAB.NS','DIXON.NS','DLF.NS','LALPATHLAB.NS','DRREDDY.NS','EICHERMOT.NS','ESCORTS.NS','EXIDEIND.NS','FEDERALBNK.NS','FSL.NS','ZEEL.NS','WHIRLPOOL.NS','WIPRO.NS','VOLTAS.NS','VEDL.NS','KOTAKBANK.NS','LTIM.NS','LTTS.NS','UBL.NS','MCDOWELL-N.NS','UPL.NS','RAIN.NS','RBL.NS','RAMCOCEM.NS','RELIANCE.NS','TCS.NS','TITAN.NS','TECHM.NS','TRENT.NS','TORNTPHARM.NS','ABBOTINDIA.NS','BOSCHLTD.NS','HONAUT.NS','MARUTI.NS','MRF.NS','NESTLEIND.NS']
    return fo_stocks

# Step 2: Filter stocks with today's trading volume greater than past 10 days' EMA volume
def filter_by_volume(stocks):
    filtered_stocks = []
    for stock in stocks:
        data = yf.download(stock, period="15d", interval="1d")
        if len(data) < 11:
            continue
        data['EMA_10'] = data['Volume'].ewm(span=10, adjust=False).mean()
        if data['Volume'].iloc[-1] > data['EMA_10'].iloc[-2]:
            filtered_stocks.append(stock)
    return filtered_stocks

# Step 3: Filter stocks by candlestick patterns
def identify_patterns(data):
    patterns = {
        'marubozu': lambda x: (x['Open'] == x['Low'] and x['Close'] == x['High']),
        'doji': lambda x: (abs(x['Open'] - x['Close']) < 0.1 * (x['High'] - x['Low'])),
        'spinning_top': lambda x: (abs(x['Open'] - x['Close']) < 0.3 * (x['High'] - x['Low'])),
        'hammer': lambda x: ((x['High'] - x['Close']) / (x['High'] - x['Low']) > 0.6) and ((x['Open'] - x['Low']) / (x['High'] - x['Low']) > 0.6),
        'bullish_engulfing': lambda x: (x['Close'] > x['Open'] and x['Close'].shift(1) < x['Open'].shift(1) and x['Close'] > x['Open'].shift(1) and x['Open'] < x['Close'].shift(1)),
        'bullish_harami': lambda x: (x['Close'] > x['Open'] and x['Close'].shift(1) < x['Open'].shift(1) and x['Open'] > x['Close'].shift(1) and x['Close'] < x['Open'].shift(1)),
        'morning_star': lambda x: (x['Close'].shift(2) < x['Open'].shift(2) and x['Close'].shift(1) < x['Open'].shift(1) and x['Open'] > x['Close'].shift(1) and x['Close'] > x['Open'].shift(2)),
    }
    for pattern, condition in patterns.items():
        if condition(data.iloc[-1]):
            return True
    return False

def filter_by_patterns(stocks):
    filtered_stocks = []
    for stock in stocks:
        data = yf.download(stock, period="60d", interval="1d")
        if identify_patterns(data):
            filtered_stocks.append(stock)
    return filtered_stocks

# Step 4: Plot past 52 days of Japanese candlestick chart with resistance and support
def plot_candlestick_chart(stocks):
    for stock in stocks:
        data = yf.download(stock, period="60d", interval="1d")
        data = data[-52:]
        data['Date'] = data.index.map(mdates.date2num)
        ohlc = data[['Date', 'Open', 'High', 'Low', 'Close']].copy()
        
        fig, ax = plt.subplots()
        candlestick_ohlc(ax, ohlc.values, width=0.6, colorup='g', colordown='r', alpha=0.8)
        
        ax.xaxis_date()
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
        plt.xticks(rotation=45)
        plt.title(f'Candlestick chart for {stock}')
        plt.xlabel('Date')
        plt.ylabel('Price')
        
        # Calculate and plot resistance and support levels
        pivots = []
        dates = []
        counter = 0
        lastPivot = 0
        
        for i in data.index:
            if counter < 10:
                pivots.append(0)
                dates.append(0)
                counter += 1
            else:
                high_range = data['High'][counter-10:counter]
                current_max = high_range.max()
                low_range = data['Low'][counter-10:counter]
                current_min = low_range.min()
                pivot = (current_max + current_min) / 2
                pivots.append(pivot)
                dates.append(data['Date'][counter])
                lastPivot = pivot
                counter += 1
        
        for i in range(len(pivots)):
            if pivots[i] != 0:
                plt.plot_date([dates[i], dates[i+1]], [pivots[i], pivots[i+1]], '-', linewidth=1.5, color='blue')
        
        plt.show()

# Main function to run the analysis
def main():
    fo_stocks = fetch_fo_stocks()
    print("Step 1: F&O Stocks fetched:", fo_stocks)
    
    volume_filtered_stocks = filter_by_volume(fo_stocks)
    print("Step 2: Stocks filtered by volume:", volume_filtered_stocks)
    
    pattern_filtered_stocks = filter_by_patterns(volume_filtered_stocks)
    print("Step 3: Stocks filtered by candlestick patterns:", pattern_filtered_stocks)
    
    plot_candlestick_chart(pattern_filtered_stocks)

if __name__ == "__main__":
    main()
